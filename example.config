# This is an example configuration file for an aa436.py Agent called "example.config".

# Specify a file to include which contains additional directives to be
# sent to this agent.  Includes usually contain generic configuration for
# a platform type (for example, the "ps" command to use for a particular
# Unix flavour), or shared configuration to be used by a number of hosts
# which form a cluster.
include:           macosx_generic
include:           cluster_1

# Match the string "this_pattern_here" in the file "test.log" and generate
# an event containing the string "A Message" for each log line matched.
file:              test.log
match:             this_pattern_here
alert_all:         tags=TAG1  message=A Message

# Match any line containing a numerical value in "test.log" and generate
# an event containing the text of the actual line matched.  The "active:"
# directive restricts generating events to:
# - 06:00 - 22:00 any day of the week.
# - 22:30 - 23:59 on Mondays (day 1).
# Any section can contain an "active" directive.
file:              test.log
match:             \d+
active:            0123456;06:00-22:00,1;22:30-23:59
alert_all:         tags=NUM1

# Generate an event containing the string "too many matches" if the number of
# times the string "that_pattern" is matched in test.log exceeds 2 in 10 seconds.
# NB: A fixed-block window is used.
file:              test.log
match:             that_pattern
alert_n:           tags=EVERY  threshold=2  seconds=10  message=too many matches

# Output a metric every 10 seconds for the number of times the string "another_pattern"
# has been matched in the file test.log.
file:              test.log
match:             another_pattern
alert_count:       tags=COUNT  seconds=10

# Generate an event containing the string "file has not been updated" if there are
# no matches of the given string (in this case "." - ie. any string) in the last
# 10 seconds.
file:              test.log
match:             .
alert_inactive:    tags=INACTIVE  seconds=10  message=file has not been updated

# Specifies the "ps" command to used for process checking.
ps_command:        ps -fe

# Specifies a process to monitor.  An event is generated if the count of this process
# falls outside of the min/max limits.  The event contains the given message.
# In this case, the optional "active" directive is used to define a time range
# during which this process check takes place.
process:           /Applications/Minecraft.app/Contents/MacOS/JavaApplicationStub
active:            0123456;00:00-23:59
alert_running:     tags=MINECRAFT  min=1  max=1  message=Minecraft is no longer running

# Run a command, extracting selected parts of the output.
# The "alert_if" directives trigger an event if part of the command output exceeds the "upper_limit"
# value.  The "match" parameter is used to match a specific part of a line in the command
# output.
# "alert_metric" outputs periodic metrics collected from the command run.
# This example extracts from the "df" command.
run:               command=df -i  extract=\s+([0-9\.]+)%\s+\d+\s+\d+\s+([0-9\.]+)%\s+(\S+)
alert_if:          tags=FS  match=3,/  upper_limit=1,95  message=Filesystem / exceeded 95 pct space utilisation
alert_if:          tags=FS  match=3,/  upper_limit=2,95  message=Filesystem / has used over 95 pct of its inodes
alert_metric:      tags=FS_MET  match=3,/  metric=1

# Another example extracts from the "uptime" command with a threshold alarm and periodic
# metric.
run:               command=uptime  extract=(\S+) averages:\s+([0-9\.]+)\s+
alert_if:          tags=LOAD  match=1,load  upper_limit=2,4  message=Load average is over 4
active:            0123456;00:00-21:00
alert_metric:      tags=LOAD_MET  match=1,load  metric=2

# This example extracts periodic metrics from the vm_stat command.
run:               command=vm_stat  extract=(\S+) free:\s+(\d+)
alert_metric:      tags=MEM  match=1,Pages  metric=2
